[{"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/index.js":"1","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/reportWebVitals.js":"2","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/App.js":"3","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Class.js":"4","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Error500.js":"5","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Navbar.js":"6","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Exam.js":"7","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/ClassDetail.js":"8","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/CostDashboard.js":"9","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/Project.js":"10","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/CostControl.js":"11","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/ProjectDetail.js":"12","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/VPCDetail.js":"13"},{"size":500,"mtime":1614927362722,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1614927362724,"results":"16","hashOfConfig":"15"},{"size":1902,"mtime":1621586156693,"results":"17","hashOfConfig":"15"},{"size":7639,"mtime":1621852903482,"results":"18","hashOfConfig":"15"},{"size":383,"mtime":1615198661957,"results":"19","hashOfConfig":"15"},{"size":1471,"mtime":1621578153229,"results":"20","hashOfConfig":"15"},{"size":6341,"mtime":1617065778612,"results":"21","hashOfConfig":"15"},{"size":5574,"mtime":1621587398954,"results":"22","hashOfConfig":"15"},{"size":7403,"mtime":1622009173151,"results":"23","hashOfConfig":"15"},{"size":5673,"mtime":1620799262361,"results":"24","hashOfConfig":"15"},{"size":3779,"mtime":1621355605583,"results":"25","hashOfConfig":"15"},{"size":4253,"mtime":1621355652941,"results":"26","hashOfConfig":"15"},{"size":434,"mtime":1621586178911,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"q2o9dk",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/index.js",[],["61","62"],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/reportWebVitals.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/App.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Class.js",["63","64"],"import { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Card, Col, Form, Input, message, Modal, PageHeader, Popconfirm, Row, Spin, Statistic, Tooltip } from 'antd'\nimport { ExclamationCircleOutlined, DeleteOutlined, PlusOutlined } from '@ant-design/icons'\nimport Error500 from './Error500'\n\nconst axios = require('axios')\n\nfunction Class() {\n\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState([])\n  const [update, setUpdate] = useState([''])\n  const [subject, setSubject] = useState('')\n  const [lecturer, setLecturer] = useState('')\n  const [section, setSection] = useState('')\n  const [budget, setBudget] = useState()\n  const [awsTag, setAWSTag] = useState('')\n  const [isError, setIsError] = useState(false)\n  const [ec2, setEC2] = useState([])\n\n  useEffect(() => {\n    getSubject()\n  }, [update])\n\n  const getSubject = async () => {\n    try {\n      const response = await axios.get('http://localhost:9000/api/subject')\n      setData(response.data)\n      setIsError(false)\n      console.log(response.data)\n      setLoading(true)\n\n    } catch (error) {\n      console.error(error)\n      setIsError(true)\n    }\n  }\n\n  const addSubject = async () => {\n    try {\n      message.success(`${subject} created successfully`, 2.75)\n      const response = await axios.post('http://localhost:9000/api/subject', {\n        'subject': subject,\n        'lecturer': lecturer,\n        'section': section,\n        'budget': budget,\n        'aws_tag_value': awsTag\n      })\n      setUpdate('add')\n      console.log(response.data)\n\n    } catch (error) {\n      console.log(error)\n    };\n    setIsModalVisible(false)\n  }\n\n  const deleteSubject = async (id, subject) => {\n    try {\n      message.success(`${subject} deleted`, 2.75)\n      const response = await axios.post('http://localhost:9000/api/subject/delete', {\n        'id': id\n      })\n      setUpdate('delete')\n      console.log(response.data)\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const stopEC2 = async (aws_tag_value) => {\n    try {\n      message.success(`Stopping All EC2 Instances that has tag value \"${aws_tag_value}\"`, 2.75)\n      const response = await axios.get('http://localhost:9000/api/ec2/filter/by-tag-value/' + aws_tag_value)\n      setEC2(response.data)\n      let instanceIDArr = await ec2.map(data => data.InstanceId)\n      const request = await axios.post('http://localhost:9000/api/ec2/stop-all', {\n        'instanceIds': instanceIDArr\n      })\n    } catch (error) {\n      message.success(`All EC2 Instances has been STOPPED`, 2.75)\n      console.error(error)\n      setIsError(true)\n    }\n  }\n\n  const terminateEC2 = async (aws_tag_value) => {\n    try {\n      message.success(`Terminating All EC2 Instances that has tag value \"${aws_tag_value}\"`, 2.75)\n      const response = await axios.get('http://localhost:9000/api/ec2/filter/by-tag-value/' + aws_tag_value)\n      setEC2(response.data)\n      let instanceIDArr = await ec2.map(data => data.InstanceId)\n      const request = await axios.post('http://localhost:9000/api/ec2/terminate-all', {\n        'instanceIds': instanceIDArr\n      })\n    } catch (error) {\n      message.success(`All EC2 Instances has been TERMINATED`, 2.75)\n      console.error(error)\n      setIsError(true)\n    }\n  }\n\n  const renderSubject = () => {\n\n    return data.map(data => {\n\n      return (\n        <Col span={12} justify='center'>\n          <Card\n            title={data.subject}\n            extra={<Link to={'/class/' + data._id + '/' + data.aws_tag_value}>Enter</Link>}\n            style={{ width: 500 }}\n            actions={[\n              <Popconfirm\n                title='Are you sure to delete this class?'\n                icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}\n                okText='Delete'\n                onConfirm={() => (deleteSubject(data._id, data.subject))}\n              >\n                <DeleteOutlined />\n              </Popconfirm>\n\n              ,]}>\n            <Row gutter={[16, 16]}>\n              <Col span={6}>\n                <Statistic title='Section' value={data.section} />\n              </Col>\n              <Col span={6}>\n                <Statistic title='Lecturer' value={data.lecturer} />\n              </Col>\n              <Col span={6}>\n                <Statistic title='AWS Tag Value' groupSeparator='' value={data.aws_tag_value} />\n              </Col>\n            </Row>\n            <Row gutter={[16, 16]}>\n              <Col span={8}>\n                <Popconfirm\n                  title='Are you sure to STOP ALL EC2 Instances?'\n                  icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}\n                  okText='Stop'\n                  onConfirm={() => stopEC2(data.aws_tag_value)}\n                >\n                  <Button>\n                    Stop All EC2\n                  </Button>\n                </Popconfirm>\n              </Col>\n              <Col span={8}>\n                <Popconfirm\n                  title='Are you sure to TERMINATE ALL EC2 Instances?'\n                  icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}\n                  okText='Terminate'\n                  onConfirm={() => terminateEC2(data.aws_tag_value)}\n                >\n                  <Button danger>\n                    Terminate All EC2\n                  </Button>\n                </Popconfirm>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      )\n    })\n  }\n\n  const renderError = () => {\n    if (isError === true) {\n      return (\n        <Error500 />\n      )\n    }\n  }\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  }\n\n  const handleCancel = () => {\n    setIsModalVisible(false)\n  }\n\n  const onFinish = () => {\n    addSubject()\n  }\n\n  return (\n    <div>\n      <PageHeader className='page-header' extra={[\n        <Button type='primary' icon={<PlusOutlined />} key='delete' onClick={showModal}>\n          Add Class\n        </Button>,\n      ]}>\n      </PageHeader>\n      <Modal title='Add Class' visible={isModalVisible} okType='primary' okText='Add' onOk={addSubject} onCancel={handleCancel}>\n        <Form onFinish={onFinish}>\n          <Form.Item label='Subject'>\n            <Input type='text' value={subject} name='subject' onChange={(event) => setSubject(event.target.value)} autoComplete='off' />\n          </Form.Item>\n          <Form.Item label='Lecturer'>\n            <Input type='text' value={lecturer} name='lecturer' onChange={(event) => setLecturer(event.target.value)} autoComplete='off' />\n          </Form.Item>\n          <Form.Item label='Section'>\n            <Input type='text' value={section} name='section' onChange={(event) => setSection(event.target.value)} autoComplete='off' />\n          </Form.Item>\n          <Form.Item label='Budget'>\n            <Input type='text' value={budget} name='budget' onChange={(event) => setBudget(event.target.value)} autoComplete='off' />\n          </Form.Item>\n          <Form.Item label='AWS Resource Tag Value'>\n            <Tooltip title='Please Enter AWS Resource Tag Exactly Match on AWS' color='yellow' placement='bottomLeft'>\n              <Input type='text' value={awsTag} name='awsTag' onChange={(event) => setAWSTag(event.target.value)} autoComplete='off' />\n            </Tooltip>\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Row className='Card-row' style={{ marginLeft: '7vw' }} gutter={[16, 16]}>\n        {loading ? (renderSubject()) : (<Spin size='large' style={{ marginLeft: '50%' }} />)}\n      </Row>\n      {renderError()}\n    </div>\n  )\n}\n\nexport default Class\n","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Error500.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Navbar.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/components/Exam.js",["65"],"import { useState, useEffect } from \"react\";\nimport { Button, Card, Col, Form, Input, message, Modal, PageHeader, Popconfirm, Row, Spin, Statistic, Tooltip } from \"antd\";\nimport { DeleteOutlined, ExclamationCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport Error500 from './Error500';\n\nconst axios = require('axios');\n\nfunction Exam() {\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [update, setUpdate] = useState('');\n    const [examName, setExamName] = useState('');\n    const [lecturer, setLecturer] = useState('');\n    const [section, setSection] = useState('');\n    const [awsTag, setAWSTag] = useState('');\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        getExam();\n    }, [update])\n\n    const getExam = async () => {\n        try {\n            const response = await axios.get('http://localhost:9000/api/exam');\n            setData(response.data);\n            setIsError(false);\n            console.log(response.data);\n            setLoading(true);\n\n        } catch (error) {\n            console.error(error);\n            setIsError(true);\n        }\n    }\n\n    const addExam = async () => {\n        try {\n            message.success(`${examName} created successfully`, 2.75)\n            const response = await axios.post('http://localhost:9000/api/exam', {\n                'exam_name': examName,\n                'lecturer': lecturer,\n                'section': section,\n                'awsTag': awsTag\n            })\n            setUpdate('add');\n            console.log(response)\n\n        } catch (error) {\n            console.log(error)\n        };\n\n        setIsModalVisible(false);\n    }\n\n    const deleteExam = async (id, exam_name) => {\n        try {\n            message.success(`${exam_name} deleted`, 2.75)\n            const response = await axios.post('http://localhost:9000/api/exam/delete', {\n                'id': id\n            })\n            setUpdate('delete');\n            console.log(response)\n\n        } catch (error) {\n            console.log(error)\n        };\n    }\n\n    const renderExam = () => {\n\n        return data.map(data => {\n            return (\n                <Col span={12} justify='center'>\n                    <Card\n                        title={data.exam_name}\n                        extra={<a>Enter</a>}\n                        style={{ width: 500 }}\n                        actions={[\n                            <Popconfirm\n                                title='Are you sure to delete this exam?'\n                                icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}\n                                okText='Delete'\n                                onConfirm={() => (deleteExam(data._id, data.exam_name))}\n                            >\n                                <DeleteOutlined />\n                            </Popconfirm>\n                            ,]}>\n                        <Row gutter={[16, 16]}>\n                            <Col span={6}>\n                                <Statistic title=\"Section\" value={data.section} />\n                            </Col>\n                            <Col span={6}>\n                                <Statistic title=\"Lecturer\" value={data.lecturer} />\n                            </Col>\n                            <Col span={6}>\n                                <Statistic title=\"End Time\" value='10:08' />\n                            </Col>\n                        </Row>\n                        <Row gutter={[16, 16]}>\n                            <Col span={8}>\n                                <Button>\n                                    Stop All EC2\n                  </Button>\n                            </Col>\n                            <Col span={8}>\n                                <Button danger>\n                                    Terminate All EC2\n                  </Button>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n            )\n        })\n    };\n\n    const renderError = () => {\n        if (isError === true) {\n            return (\n                <Error500 />\n            )\n        }\n    };\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false)\n    };\n\n    const onFinish = () => {\n        addExam()\n    };\n\n    return (\n        <div>\n            <PageHeader className='page-header' extra={[\n                <Button type=\"primary\" icon={<PlusOutlined />} key='delete' onClick={showModal}>\n                    Add Exam\n        </Button>,\n            ]}>\n            </PageHeader>\n            <Modal title=\"Add Exam\" visible={isModalVisible} okType='primary' okText='Add' onOk={addExam} onCancel={handleCancel}>\n                <Form onFinish={onFinish}>\n                    <Form.Item label='Exam Name'>\n                        <Input type='text' value={examName} name='exam' onChange={(event) => setExamName(event.target.value)} autoComplete='off' />\n                    </Form.Item>\n                    <Form.Item label='Lecturer'>\n                        <Input type='text' value={lecturer} name='lecturer' onChange={(event) => setLecturer(event.target.value)} autoComplete='off' />\n                    </Form.Item>\n                    <Form.Item label='Section'>\n                        <Input type='text' value={section} name='section' onChange={(event) => setSection(event.target.value)} autoComplete='off' />\n                    </Form.Item>\n                    <Form.Item label='AWS Resource Tag'>\n                        <Tooltip title='Please Enter AWS Resource Tag Exactly Match on AWS' color='yellow' placement='bottomLeft'>\n                            <Input type='text' value={awsTag} name='awsTag' onChange={(event) => setAWSTag(event.target.value)} autoComplete='off' />\n                        </Tooltip>\n                    </Form.Item>\n                </Form>\n            </Modal>\n            <Row className='Card-row' style={{ marginLeft: '7vw' }} gutter={[16, 16]}>\n                {loading ? (renderExam()) : (<Spin size=\"large\" style={{ marginLeft: '50%' }} />)}\n            </Row>\n            {renderError()}\n        </div>\n    );\n}\n\nexport default Exam;",["66","67"],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/ClassDetail.js",["68","69","70"],"import { Link, useParams } from \"react-router-dom\"\nimport { Button, Card, Input, PageHeader, Tabs, Tag, Table, Tooltip } from 'antd'\nimport { useState, useEffect, Fragment } from 'react'\nimport Error500 from '../components/Error500'\n\nconst axios = require('axios')\n\nfunction ClassDetail() {\n\n    const { aws_tag_value } = useParams()\n    const [ec2, setEC2] = useState([])\n    const [s3, setS3] = useState([])\n    const [isError, setIsError] = useState(false)\n    const [vpc, setVpc] = useState([])\n\n    const { TextArea } = Input\n\n\n    useEffect(() => {\n        getEC2Detail()\n        getS3Detail()\n        getVPCDetail()\n    }, [])\n\n    const getEC2Detail = async () => {\n        try {\n            const response = await axios.get(`http://localhost:9000/api/ec2/filter/by-tag-value/${aws_tag_value}`)\n            setEC2(response.data)\n            await getVPCDetail(response.data)\n            console.log(ec2)\n\n        } catch (error) {\n            console.error(error)\n            setIsError(true)\n        }\n    }\n\n    const getS3Detail = async () => {\n        try {\n            const response = await axios.get(`http://localhost:9000/api/s3/filter/by-tag-value/${aws_tag_value}`)\n            setS3(response.data)\n            console.log(response.data)\n\n        } catch (error) {\n            console.error(error)\n            setIsError(true)\n        }\n    }\n\n    const getVPCDetail = async (ec2) => {\n        try {\n            let vpcArr = []\n            ec2.map((instance) => vpcArr.push(instance.VpcId))\n            console.log('arr', vpcArr)\n            const response = await axios.post('http://localhost:9000/api/ec2/vpc', {\n                'VpcIds': vpcArr\n            })\n            setVpc(response.data.Vpcs)\n            console.log('VPC response', response.data.Vpcs)\n\n        } catch (error) {\n            console.log('error vpc', error)\n        }\n    }\n\n    const tagColor = (dataIndex) => {\n        let color = ''\n        if (dataIndex === 'stopped') {\n            color = 'volcano'\n        } else if (dataIndex === 'running') {\n            color = 'green'\n        } else if (dataIndex === 'stopping' || dataIndex === 'shutting-down') {\n            color = 'warning'\n        } else if (dataIndex === 'rebooting') {\n            color = 'cyan'\n        }\n        return (\n            <Tag color={color} >{dataIndex.toUpperCase()}</Tag>\n        )\n    }\n\n    const renderError = () => {\n        if (isError === true) {\n            return (\n                <Error500 />\n            )\n        }\n    };\n\n    function callback(key) {\n        console.log(key)\n    }\n\n    const { TabPane } = Tabs;\n\n    const ec2Columns = [\n        {\n            title: 'EC2 Tag',\n            dataIndex: 'Tags',\n            render: (dataIndex) => (\n\n                dataIndex.map(data => data.Key + ', ')\n            ),\n            key: ''\n        },\n        {\n            title: 'EC2 Value',\n            dataIndex: 'Tags',\n            render: (dataIndex) => (\n\n                dataIndex.map(data => data.Value + ', ')\n            ),\n            key: ''\n        },\n        {\n            title: 'Instance Type',\n            dataIndex: 'InstanceType',\n            key: ''\n        },\n        {\n            title: 'Instance State',\n            dataIndex: ['State', 'Name'],\n            render: (dataIndex) => (tagColor(dataIndex)),\n            key: ''\n\n        },\n        {\n            title: 'VPC',\n            dataIndex: 'VpcId',\n            key: ''\n\n        }\n    ]\n    const s3Columns = [\n        {\n            title: 'Owner',\n            dataIndex: ['Tags', 'Key'],\n            key: ''\n        },\n        {\n            title: 'Bucket Name',\n            dataIndex: 'Bucket',\n            key: ''\n        },\n\n    ]\n\n    const vpcColumns = [\n        {\n            title: 'VPC ID',\n            dataIndex: 'VpcId',\n            key: ''\n        },\n        {\n            title: 'CIDR Block',\n            dataIndex: 'CidrBlock',\n            key: ''\n        },\n        {\n            title: 'State',\n            dataIndex: 'State',\n            key: ''\n        }\n\n    ]\n\n    return (\n        <div>\n            <PageHeader\n                className='site-page-header'\n                onBack={() => window.history.back()}\n                title='Title'\n            />\n            <Tabs defaultActiveKey='1' size='large' onChange={callback}>\n                <TabPane tab='Class Policy' key='1'>\n                    <Card id='policy-editor-card' title='Policy Editor'>\n                        Please Enter Policy in JSON Format\n                        <Tooltip title='Notice! This Policy will Apply to Every IAM Account that under AWS Account you used' color='red' placement='bottomLeft'>\n                            <TextArea rows={20} />\n                        </Tooltip>\n                        <Button type='primary'>\n                            Apply\n                        </Button>\n                    </Card>\n                </TabPane>\n                <TabPane tab='EC2' key='2'>\n                    <span>\n                        <Table columns={ec2Columns} dataSource={ec2} />\n                        <Table columns={vpcColumns} dataSource={vpc} />\n                    </span>\n\n                    {renderError()}\n                </TabPane>\n                <TabPane tab='S3' key='3'>\n                    <Table columns={s3Columns} dataSource={s3} />\n                    {renderError()}\n                </TabPane>\n                <TabPane tab='RDS' key='4'>\n\n                    {renderError()}\n                </TabPane>\n            </Tabs>\n        </div >\n    )\n}\n\nexport default ClassDetail","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/CostDashboard.js",["71","72","73","74","75"],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/Project.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/CostControl.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/ProjectDetail.js",["76"],"import { useParams } from \"react-router-dom\"\nimport { Button, Card, Input, PageHeader, Tabs, Tag, Table, Tooltip } from 'antd'\nimport { useState, useEffect } from 'react'\nimport Error500 from '../components/Error500'\n\nconst axios = require('axios')\n\nfunction ProjectDetail() {\n\n    const { aws_tag_value } = useParams()\n    const [ec2, setEC2] = useState([])\n    const [s3, setS3] = useState([])\n    const [isError, setIsError] = useState(false)\n\n    const { TextArea } = Input\n\n    useEffect(() => {\n        getEC2Detail()\n        getS3Detail()\n    }, [])\n\n    const getEC2Detail = async () => {\n        try {\n            const response = await axios.get(`http://localhost:9000/api/ec2/filter/by-tag-value/${aws_tag_value}`);\n            setEC2(response.data);\n            console.log(response.data);\n\n        } catch (error) {\n            console.error(error);\n            setIsError(true);\n        }\n    }\n\n    const getS3Detail = async () => {\n        try {\n            const response = await axios.get(`http://localhost:9000/api/s3/filter/by-tag-value/${aws_tag_value}`)\n            setS3(response.data)\n            console.log(response.data)\n\n        } catch (error) {\n            console.error(error)\n            setIsError(true)\n        }\n    }\n\n    const tagColor = (dataIndex) => {\n        let color = ''\n        if (dataIndex === 'stopped') {\n            color = 'volcano'\n        } else if (dataIndex === 'running') {\n            color = 'green'\n        } else if (dataIndex === 'stopping' || dataIndex === 'shutting-down') {\n            color = 'warning'\n        } else if (dataIndex === 'rebooting') {\n            color = 'cyan'\n        }\n        return (\n            <Tag color={color} >{dataIndex.toUpperCase()}</Tag>\n        )\n    }\n\n    const renderError = () => {\n        if (isError === true) {\n            return (\n                <Error500 />\n            )\n        }\n    }\n\n    function callback(key) {\n        console.log(key)\n    }\n\n    const { TabPane } = Tabs\n\n    const ec2Columns = [\n        {\n            title: 'Owner',\n            dataIndex: ['Tags', 'Key'],\n            key: ''\n        },\n        {\n            title: 'Instance Type',\n            dataIndex: 'InstanceType',\n            key: ''\n        },\n        {\n            title: 'Instance State',\n            dataIndex: ['State', 'Name'],\n            render: (dataIndex) => (tagColor(dataIndex)),\n            key: ''\n\n        }\n    ]\n    const s3Columns = [\n        {\n            title: 'Owner',\n            dataIndex: ['Tags', 'Key'],\n            key: ''\n        },\n        {\n            title: 'Bucket Name',\n            dataIndex: 'Bucket',\n            key: ''\n        },\n\n    ]\n\n    return (\n        <div>\n            <PageHeader\n                className='site-page-header'\n                onBack={() => window.history.back()}\n                title='Title'\n            />\n            <Tabs defaultActiveKey='1' size='large' onChange={callback}>\n                <TabPane tab='Class Policy' key='1'>\n                    <Card id='policy-editor-card' title='Policy Editor'>\n                        Please Enter Policy in JSON Format\n                        <Tag color=\"warning\">AWS Account:  lapas</Tag>\n                        <Tag color=\"warning\">IAM Account:  CostExp</Tag>\n                        <Tooltip title='Notice! This Policy will Apply to Every IAM Account that under AWS Account you used' color='red' placement='bottomLeft'>\n                            <TextArea rows={20} />\n                        </Tooltip>\n                        <Button type='primary'>\n                            Apply\n                        </Button>\n                    </Card>\n                </TabPane>\n                <TabPane tab='EC2' key='2'>\n                    <Table columns={ec2Columns} dataSource={ec2} />\n                    {renderError()}\n                </TabPane>\n                <TabPane tab='S3' key='3'>\n                    <Table columns={s3Columns} dataSource={s3} />\n                    {renderError()}\n                </TabPane>\n                <TabPane tab='RDS' key='4'>\n                    Content of Tab Pane 3\n                    {renderError()}\n                </TabPane>\n            </Tabs>\n        </div >\n    )\n}\n\nexport default ProjectDetail","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/views/VPCDetail.js",["77"],"import { useParams } from \"react-router-dom\"\nimport { Table } from 'antd'\n\nconst VPCDetail = () => {\n\n    const s3Columns = [\n        {\n            title: 'Owner',\n            dataIndex: ['Tags', 'Key'],\n            key: ''\n        },\n        {\n            title: 'Bucket Name',\n            dataIndex: 'Bucket',\n            key: ''\n        },\n\n    ]\n\n    return (\n        <Table columns={s3Columns} />\n    )\n}\nexport default VPCDetail",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":80,"column":13,"nodeType":"84","messageId":"85","endLine":80,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":96,"column":13,"nodeType":"84","messageId":"85","endLine":96,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":78,"column":32,"nodeType":"88","endLine":78,"endColumn":35},{"ruleId":"78","replacedBy":"89"},{"ruleId":"80","replacedBy":"90"},{"ruleId":"82","severity":1,"message":"91","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":14},{"ruleId":"82","severity":1,"message":"92","line":3,"column":31,"nodeType":"84","messageId":"85","endLine":3,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":23,"column":8,"nodeType":"95","endLine":23,"endColumn":10,"suggestions":"96"},{"ruleId":"82","severity":1,"message":"97","line":5,"column":10,"nodeType":"84","messageId":"85","endLine":5,"endColumn":20},{"ruleId":"82","severity":1,"message":"98","line":5,"column":22,"nodeType":"84","messageId":"85","endLine":5,"endColumn":34},{"ruleId":"82","severity":1,"message":"99","line":5,"column":36,"nodeType":"84","messageId":"85","endLine":5,"endColumn":50},{"ruleId":"82","severity":1,"message":"100","line":5,"column":52,"nodeType":"84","messageId":"85","endLine":5,"endColumn":64},{"ruleId":"93","severity":1,"message":"101","line":28,"column":8,"nodeType":"95","endLine":28,"endColumn":36,"suggestions":"102"},{"ruleId":"93","severity":1,"message":"94","line":20,"column":8,"nodeType":"95","endLine":20,"endColumn":10,"suggestions":"103"},{"ruleId":"82","severity":1,"message":"104","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":19},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'request' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["105"],["106"],"'Link' is defined but never used.","'Fragment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getEC2Detail' and 'getS3Detail'. Either include them or remove the dependency array.","ArrayExpression",["107"],"'VictoryBar' is defined but never used.","'VictoryChart' is defined but never used.","'VictoryTooltip' is defined but never used.","'VictoryTheme' is defined but never used.","React Hook useEffect has missing dependencies: 'getSubject' and 'updateGraph'. Either include them or remove the dependency array.",["108"],["109"],"'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"110","fix":"114"},"Update the dependencies array to be: [getEC2Detail, getS3Detail]",{"range":"115","text":"116"},"Update the dependencies array to be: [date, getSubject, granularity, service, updateGraph]",{"range":"117","text":"118"},{"range":"119","text":"116"},[630,632],"[getEC2Detail, getS3Detail]",[1004,1032],"[date, getSubject, granularity, service, updateGraph]",[553,555]]