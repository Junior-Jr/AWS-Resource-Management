[{"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/index.js":"1","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/reportWebVitals.js":"2","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/App.js":"3","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/Class.js":"4","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/Error500.js":"5"},{"size":500,"mtime":1611240117495,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611135836836,"results":"8","hashOfConfig":"7"},{"size":1853,"mtime":1612164741890,"results":"9","hashOfConfig":"7"},{"size":4398,"mtime":1612360465802,"results":"10","hashOfConfig":"7"},{"size":394,"mtime":1612164682260,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"q2o9dk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/index.js",[],["25","26"],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/reportWebVitals.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/App.js",[],"/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/Class.js",["27"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Card, Col, Divider, Form, Input, Modal, Row, Spin, Statistic, Tooltip } from \"antd\";\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport Error500 from './Error500';\n\nconst axios = require('axios');\n\nfunction Class() {\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const [subject, setSubject] = useState('');\n  const [lecturer, setLecturer] = useState('');\n  const [section, setSection] = useState('');\n  const [awsTag, setAWSTag] = useState('');\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    getSubject();\n  },[])\n\n  const getSubject = async () => {\n    try {\n      const response = await axios.get('http://localhost:9000/api/subject');\n      setData(response.data);\n      setIsError(false);\n      console.log(response.data);\n      setLoading(true);\n\n    } catch (error) {\n      console.error(error);\n      setIsError(true);\n    }\n  }\n\n  const addSubject = async () => {\n\n    axios.post('http://localhost:9000/api/subject', {\n      'subject': subject,\n      'lecturer': lecturer,\n      'section': section,\n      'awsTag': awsTag\n    })\n    .then(function (response) {\n      console.log(response)\n    })\n    .catch(function (error) {\n      console.log(error)\n    });\n\n    setIsModalVisible(false);\n    // const response = await axios.get('http://localhost:9000/api/subject');\n    // setData(response.data);\n    window.location.reload()\n  }\n\n  const renderSubject = () => {\n\n      return data.map(data => {\n        return (\n          <Col span={12} justify='center'>\n            <Card title={data.subject} extra={<a>Enter</a>} style={{ width: 500 }} actions={[<DeleteOutlined key=\"setting\" />,]}>\n              <Row gutter={[16, 16]}>\n                <Col span={6}>\n                  <Statistic title=\"Section\" value={data.section} />\n                </Col>\n                <Col span={6}>\n                  <Statistic title=\"Lecturer\" value={data.lecturer} />\n                </Col>\n              </Row>\n              <Row gutter={[16, 16]}>\n                <Col span={8}>\n                  <Button>\n                    Stop All EC2\n                  </Button>\n                </Col>\n                <Col span={8}>\n                  <Button danger>\n                    Terminate All EC2\n                  </Button>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        )\n      })\n    };\n\n    const renderError = () => {\n      if (isError === true) {\n        return (\n          <Error500 />\n        )\n      }\n    };\n\n    const showModal = () => {\n      setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      setIsModalVisible(false)\n    };\n\n    const onFinish = (event) => {\n      addSubject()\n    };\n\n    return (\n      <div>\n        <Button type='primary' icon={<PlusOutlined />} onClick={showModal}>\n          Add Class\n      </Button>\n        <Modal title=\"Add Class\" visible={isModalVisible} okType='primary' okText='Add' onOk={addSubject} onCancel={handleCancel}>\n          <Form onFinish={onFinish}>\n            <Form.Item label='Subject'>\n              <Input type='text' value={subject} name='subject' onChange={(event) => setSubject(event.target.value)} autoComplete='off' />\n            </Form.Item>\n            <Form.Item label='Lecturer'>\n              <Input type='text' value={lecturer} name='lecturer' onChange={(event) => setLecturer(event.target.value)} autoComplete='off' />\n            </Form.Item>\n            <Form.Item label='Section'>\n              <Input type='text' value={section} name='section' onChange={(event) => setSection(event.target.value)} autoComplete='off' />\n            </Form.Item>\n            <Form.Item label='AWS Resource Tag'>\n              <Tooltip title='Please Enter AWS Resource Tag Exactly Match on AWS' color='yellow' placement='bottomLeft'>\n                <Input type='text' value={awsTag} name='awsTag' onChange={(event) => setAWSTag(event.target.value)} autoComplete='off' />\n              </Tooltip>\n            </Form.Item>\n          </Form>\n        </Modal>\n        <Divider />\n        <Row gutter={[16, 16]}>\n          {loading ? (renderSubject()) : (<Spin size=\"large\" />)}\n        </Row>\n        {renderError()}\n      </div>\n    );\n  }\n\n  export default Class;\n","/Users/junior/Documents/GitHub/AWS-Resource-Management/react-aws-rms/src/Error500.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":63,"column":47,"nodeType":"36","endLine":63,"endColumn":50},{"ruleId":"30","replacedBy":"37"},{"ruleId":"32","replacedBy":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["39"],["40"],"no-global-assign","no-unsafe-negation"]